#SQLite code

SELECT loan_status,
       COUNT( * ) 
  FROM loan
 GROUP BY loan_status;
 
 UPDATE loan
 SET IfDefault=1
 WHERE loan_status='Charged Off' or loan_status='Default' or loan_status='Does not meet the credit policy. Status:Charged Off' or loan_status='Late (31-120 days)';
 
SELECT IfDefault, COUNT(*) FROM loan GROUP BY IfDefault;
 
CREATE VIEW train AS SELECT 
IfDefault,
loan_status,
loan_amnt,
funded_amnt,
funded_amnt_inv,
term,
int_rate,
dti,
emp_length,
grade,
sub_grade,
home_ownership,
annual_inc,
verification_status,
pymnt_plan,
purpose,
title,
delinq_2yrs,
inq_last_6mths 
FROM loan LIMIT 1130334;

CREATE VIEW validation AS SELECT 
IfDefault,
loan_status,
loan_amnt,
funded_amnt,
funded_amnt_inv,
term,
int_rate,
dti,
emp_length,
grade,
sub_grade,
home_ownership,
annual_inc,
verification_status,
pymnt_plan,
purpose,
title,
delinq_2yrs,
inq_last_6mths 
FROM loan LIMIT 1130334, 565167;

CREATE VIEW test SELECT 
IfDefault,
loan_amnt,
funded_amnt,
funded_amnt_inv,
term,
int_rate,
dti,
emp_length,
grade,
sub_grade,
home_ownership,
annual_inc,
verification_status,
pymnt_plan,
purpose,
title,
delinq_2yrs,
inq_last_6mths 
FROM loan LIMIT 1695501, 565167;

#R code
setwd("D:/McKinseyTask/lending-club-loan-data")

library(data.table)

train_data<-fread("train.csv",head=TRUE)
validate_data<-fread("validate.csv",head=TRUE)
test_data<-fread("test.csv",head=TRUE)

#levels(as.factor(train_data$loan_status))
#table(as.factor(train_data$IfDefault))
#table(as.factor(validate_data$IfDefault))
#table(as.factor(test_data$IfDefault))


m0<-glm(IfDefault ~ term + int_rate + dti + grade + annual_inc + verification_status + delinq_2yrs, data=train_data, family=binomial)
m1<-glm(IfDefault ~ term + int_rate + verification_status + grade + annual_inc  + delinq_2yrs, data=train_data, family=binomial)
m2<-glm(IfDefault ~ term + grade + annual_inc +verification_status +delinq_2yrs, data=train_data, family=binomial)
m3<-glm(IfDefault ~ term + grade + annual_inc +  delinq_2yrs, family = binomial, data = train_data)



summary(m1)
#model_selection<-step(m1)


#VALIDATE
results_prob <- predict(m1,newdata=validate_data,type = "response")

results <- ifelse(results_prob > 0.75,1,0)

answers<-as.numeric(validate_data$IfDefault)

all <- data.frame(answers=unlist(answers), results=results) 
trueneg <- all[answers==0,] 
#dim(trueneg)
#trueneg

truepos <- all[answers==1,] 
dim(truepos)

# false positive rate fpr
fpr<-sum(trueneg$answers!=trueneg$results, na.rm = TRUE)/length(trueneg$answers)
fpr

#false negative rate fnr
fnr<-sum(truepos$answers!=truepos$results, na.rm = TRUE)/length(truepos$answers)
fnr#2 defaults clients from alls default clients were classified as default

#ROC curve
library(ROCR)
p <- predict(m1, validate_data, type="response") 
pr <- prediction(p, validate_data$IfDefault)
prf<- performance(pr, measure = "tpr", x.measure = "fpr") 
plot(prf)

#AUC
auc <- performance(pr, measure = "auc") 
auc <- auc@y.values[[1]] 
auc 

#TEST
results_prob <- predict(m1,newdata=test_data,type = "response")

results <- ifelse(results_prob > 0.75,1,0)

p <- predict(m1, test_data, type="response") 
pr <- prediction(p, test_data$IfDefault) # 
prf<- performance(pr, measure = "tpr", x.measure = "fpr") 
plot(prf)

auc <- performance(pr, measure = "auc") 
auc <- auc@y.values[[1]] 
auc 
